grammar org.absmodel.AbsModel with org.eclipse.xtext.xbase.Xbase

generate absModel "http://www.absmodel.org/AbsModel"

AbsModel:
	moduleSection=AbsModuleSection
	importSection=AbsImportSection?
	declarations+=(
		DataTypeDeclaration | 
		TypeSynonymDeclaration |
		FunctionDeclaration | 
		InterfaceDeclaration | 
		ClassDeclaration)*
	'{'
		statements+=Statement*
	'}';

AbsModuleSection:
	'module' QualifiedName ';';

AbsImportSection:
	importDeclarations+=AbsImportDeclaration+;

AbsImportDeclaration:
	'import' QualifiedTypeIdentifier '.*'? ';';

QualifiedTypeIdentifier :
	QualifiedName
;

Identifier :
	ValidID
;

TypeExpression :
	QualifiedTypeIdentifier 
;

TypeExpressionList :
	TypeExpression (',' TypeExpression)*
;

GenericType:
	'<' TypeExpressionList '>'
;	

TypeSynonymDeclaration :
	'type' name=Identifier '=' data=ValidID (type=GenericType)? ';'
;
	
DataTypeDeclaration :
	'data' name=Identifier (type=GenericType)? ' = ' (conts+=TypeConstructor ('|' const+=TypeConstructor)*) ';'
;

TypeConstructor:
	name=ValidID ('(' type = TypeExpressionList ')')?
;	

FunctionDeclaration :
	'def' returnType=TypeExpression name=Identifier type=GenericType param=ParamList
	' = ' 
	('builtin' | exp = FunPureExpression )  ';'
;

PureExpression returns Expression :
	PureExpression2  ({Expression.left=current} op = BinaryOp right = PureExpression)* 
;

PureExpression2 returns Expression :
	fun = ValidID '(' params = PureExpressionList ')' |
	op = UnaryOp exp = PureExpression |
	int = INT |
	string = STRING |
	'(' exp = PureExpression ')'
;

PureExpressionList :
	param += PureExpression (',' param += PureExpression) *
;

FunPureExpression returns Expression :
	exp = PureExpression |
	'case' cexp = FunPureExpression '{' branch += CaseBranch*  '}' 
;

CaseBranch:
	pattern = Pattern '=>' exp = FunPureExpression ';'
;

Pattern : 
	INT | 
	STRING | 
	Identifier |
	QualifiedTypeIdentifier ( '(' Pattern (',' Pattern)* ')' )?
;

InterfaceDeclaration:
	'interface' name=Identifier ('extends' type += TypeExpressionList)? '{'
		(elements+=MethodSignature ';')*
	'}'
;

ParamList:
	paramList = '(' ( params+=FormalParam (',' params+=FormalParam)* )? ')'
;

MethodSignature:
	type=JvmTypeReference name=ValidID param=ParamList
;

ClassDeclaration:
	'class' name=ValidID param=ParamList? ('implements' type += TypeExpressionList)? '{'
		('{' 
			(elements+=SyncStatement)*
		'}')?
		(fields+=Field';')*
		(operations+=Method)* 
	'}';
	
Field:
	type=TypeExpression name=Identifier
;

Method:
	MethodSignature '{'
		element+=Statement*
		('return' exp=PureExpression ';')?
	'}'
;

FormalParam:
	type = TypeExpression name = Identifier
;

Statement:
	stmt = (AsyncStatement | SyncStatement | PureExpression)
;

AsyncStatement returns Expression:
	SyncStatement |
	stmt = '{' stmts += AsyncStatement* '}' |
	'if' '(' exp = PureExpression ')' then = AsyncStatement ('else' else = SyncStatement)? |
	'while' '(' exp = PureExpression ')' do = AsyncStatement |
	((type = TypeExpression)? name = Identifier '=')? exp = (AsyncExpression | PureExpression) ';' |
	'await' guard = GuardExpression '?' ';' |
	stmt = 'suspend' ';'
;

AsyncExpression returns Expression :
	'new' contructor = TypeExpression '(' params = PureExpressionList ')' |
	'await'? object = PureExpression '!' method = Identifier '(' params = PureExpressionList ')' 
;

GuardExpression returns GuardExpression :
	GuardExpression2  ({GuardExpression.left=current} '&' right = GuardExpression)* 
;

GuardExpression2 returns GuardExpression :
	variable = Identifier '?' |
	'duration' '(' min = PureExpression ',' max = PureExpression ')' |
	exp = PureExpression |
	'(' GuardExpression ')'
;

SyncStatement returns Expression:
	stmt = 'skip' ';' |
	stmt = 'assert' exp = PureExpression ';' | 
	stmt = '{' stmts += SyncStatement* '}' |
	'if' '(' exp = PureExpression ')' then = SyncStatement ('else' else = SyncStatement)? |
	'while' '(' exp = PureExpression ')' do = SyncStatement |
	((type = TypeExpression)? name = Identifier '=')? exp = (SyncExpression | PureExpression) ';'
;

SyncExpression returns Expression:
	'new' 'local' contructor = TypeExpression '(' params = PureExpressionList ')' |
	object = PureExpression '.' method = Identifier '(' params = PureExpressionList ')' |
	exp = PureExpression '.' 'get'
;

UnaryOp :
	Neg | Minus
;

ArithBinaryOp :
	Add | Minus | Mult | Div | Mod 
;

EqualityBinaryOp : 
	Leq | Geq | Lt | Gt | Eq | Ne
;

ConditionBinaryOp : 
	And | Or
;

BinaryOp :
	ArithBinaryOp | EqualityBinaryOp | ConditionBinaryOp
;

Neg : '!' ;
Add : '+' ;
Minus : '-' ;
Mult : '*' ;
Div : '/' ;
Mod : '%' ;
Plus : '+' ;
Leq : '<=' ;
Geq : '>=' ;
Lt : '<' ;
Gt : '>' ;
And : '&&' ;
Or : '||' ;
Eq : '==' ;
Ne : '!=' ;
